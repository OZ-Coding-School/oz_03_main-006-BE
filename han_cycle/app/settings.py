"""
Django settings for han_cycle project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import time
from datetime import timedelta
from pathlib import Path

from dotenv import load_dotenv
from elasticsearch import Elasticsearch
from elasticsearch.exceptions import ConnectionError
from retrying import retry

# 프로젝트의 루트 디렉토리를 정의합니다.
BASE_DIR = Path(__file__).resolve().parent.parent

# 빠른 개발 설정 - 운영 환경에 적합하지 않음
# 운영 환경에서 사용할 수 있는 설정을 확인하려면 아래 링크를 참조하세요:
# https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# .env 파일에서 환경 변수를 로드하여 설정에 사용할 수 있도록 합니다.
load_dotenv(override=True)

# 보안 경고: 운영 환경에서는 이 값을 비밀로 유지해야 합니다.
SECRET_KEY = os.getenv("SECRET_KEY", "default_secret_key")

# 보안 경고: 운영 환경에서는 디버그 모드를 꺼야 합니다.
DEBUG = True

# ALLOWED_HOSTS는 애플리케이션이 접근을 허용하는 도메인 또는 IP 주소를 정의합니다.
ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "0.0.0.0",
    "43.201.142.187",
    "hancycle-ELB-1331249209.ap-northeast-2.elb.amazonaws.com",
    "api.hancycle.site",
    "172.31.0.5",
]

# 모든 출처에서의 CORS 요청을 허용합니다.
CORS_ORIGIN_ALLOW_ALL = True

# 특정 출처에서의 CORS 요청만 허용합니다 (테스트용).
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "https://hancycle.site",
    "http://43.201.142.187",
    "http://172.31.0.5",
    "https://api.hancycle.site",
]

# 인증된 요청에 대해서만 쿠키를 전달할 수 있도록 설정합니다.
CORS_ALLOW_CREDENTIALS = True

# SSL을 사용하는 경우에만 X-Forwarded-Proto 헤더를 통해 SSL을 확인합니다.
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


# Elasticsearch 서버가 가동될 때까지 대기하는 함수
# 재시도 설정: 최대 5번의 재시도를 시도하며, 지수 백오프를 적용해 최대 10초 동안 대기합니다.
@retry(
    stop_max_attempt_number=5,
    wait_exponential_multiplier=1000,
    wait_exponential_max=10000,
)
def wait_for_elasticsearch():
    es = Elasticsearch(["http://elasticsearch:9200"])
    if not es.ping():
        raise ConnectionError("Elasticsearch server is not available")


# Django 애플리케이션 정의
INSTALLED_APPS = [
    "common",  # 프로젝트에서 공통으로 사용하는 기능이나 설정을 모아둔 앱
    "django.contrib.admin",  # Django의 관리자 사이트 기능을 제공하는 앱
    "django.contrib.auth",  # 사용자 인증과 권한 부여를 관리하는 앱
    "django.contrib.contenttypes",  # Django의 컨텐츠 유형 시스템을 관리하는 앱 (모델을 다루는 데 필수)
    "django.contrib.sessions",  # 사용자 세션을 관리하는 앱
    "django.contrib.messages",  # 일회성 알림 메시지를 관리하는 앱
    "django.contrib.staticfiles",  # 정적 파일을 관리하는 앱 (CSS, JS, 이미지 등)
    "corsheaders",  # Cross-Origin Resource Sharing (CORS) 처리를 위한 앱
    "boards.apps.BoardsConfig",  # 게시판 관련 기능을 관리하는 커스텀 앱
    "locations",  # 위치 정보와 관련된 데이터를 관리하는 커스텀 앱
    "users",  # 사용자 정보와 인증 관련 기능을 관리하는 커스텀 앱
    "django.contrib.sites",  # 멀티사이트 관리를 위한 앱 (여러 사이트를 운영할 경우 사용)
    "storages",  # AWS S3 등 외부 스토리지와의 연동을 위한 앱
    "rest_framework",  # Django REST Framework - API를 구축하는 데 사용하는 앱
    "social_django",  # 소셜 로그인 (Google, Facebook 등)을 위한 Django 앱
    "rest_framework.authtoken",  # 토큰 기반 인증을 제공하는 앱
    "drf_yasg",  # Swagger/OpenAPI 기반 API 문서화를 위한 앱
    "tinymce",  # 풍부한 텍스트 편집기 (WYSIWYG) 지원을 위한 앱
    "search",  # 검색 기능을 구현하는 커스텀 앱
    "django_crontab",  # 주기적인 작업(Cron Job)을 설정하고 관리하는 앱
    "weather",  # 날씨 정보와 관련된 데이터를 관리하는 커스텀 앱
]

# Django에서 사용할 미들웨어 정의
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Swagger 설정: API 문서화를 위해 사용됩니다.
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}
    },
    "DEFAULT_AUTO_SCHEMA_CLASS": "drf_yasg.inspectors.SwaggerAutoSchema",
    "USE_SESSION_AUTH": False,
}


# django-authentication 설정
SITE_ID = 1
SOCIALACCOUNT_LOGIN_ON_GET = True

# 프로젝트의 URL 설정 파일
ROOT_URLCONF = "app.urls"

# 템플릿 설정: Django가 사용할 템플릿 엔진 및 템플릿 디렉토리를 정의합니다.
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "users" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# 데이터베이스 설정: PostgreSQL 사용
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}


# 비밀번호 검증 설정: Django의 기본 비밀번호 검증기 사용
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# 국제화 및 로케일 설정
LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"  # 한국 시간대 설정
USE_TZ = True  # 타임존 사용

USE_I18N = True

USE_TZ = True

# 정적 파일 설정
STATIC_URL = "static/"

# django-authentication 백엔드 설정
AUTHENTICATION_BACKENDS = [
    # Django admin에서의 사용자 이름 로그인 지원
    "django.contrib.auth.backends.ModelBackend",
]

CSRF_TRUSTED_ORIGINS = [
    "https://api.hancycle.site",
    "http://localhost:8000/swagger/",
    "https://hancycle.site",
]

# 이메일 백엔드 설정: Gmail SMTP 서버를 사용하여 이메일을 전송합니다.
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"  # Gmail SMTP 서버 주소
EMAIL_PORT = 587  # Gmail SMTP 포트
EMAIL_USE_TLS = True  # TLS 사용 여부
EMAIL_USE_SSL = False  # SSL 사용 여부
EMAIL_HOST_USER = "hancycle585@gmail.com"  # 이메일 서버 로그인용 이메일 주소
EMAIL_HOST_PASSWORD = "awvt ujct gvsu ahlm"  # 이메일 서버 로그인용 비밀번호
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER  # 이메일 발신자 주소

# 로그인 시 이메일이 필수임을 설정
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_ADAPTER = "users.adapters.CustomSocialAccountAdapter"
LOGIN_REDIRECT_URL = "/users/accounts/profile/"

# 기본 자동 필드 설정
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# WSGI 애플리케이션 경로
WSGI_APPLICATION = "app.wsgi.application"


# S3 설정: 미디어 파일을 AWS S3에 저장
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")

AWS_S3_CUSTOM_DOMAIN = "%s.s3.%s.amazonaws.com" % (
    AWS_STORAGE_BUCKET_NAME,
    AWS_S3_REGION_NAME,
)

AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
}
AWS_LOCATION = "images"
AWS_DEFAULT_ACL = None

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

# 미디어 파일 URL 및 루트 설정
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Elasticsearch 설정
ELASTICSEARCH_DSL = {
    "default": {"hosts": "http://elasticsearch:9200"},
}


# 기상청 API 요청 설정
KMA_API_KEY = os.getenv("KMA_API_KEY")

# 기본 사용자 모델을 덮어쓰는 설정
AUTH_USER_MODEL = "users.User"
