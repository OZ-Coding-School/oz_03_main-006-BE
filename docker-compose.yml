#version: "3.11"
services:
  app:
    build:
      context: .
      args:
        - DEV=true
    ports:
      - "8000:8000"
    volumes:
      - ./han_cycle:/app
    command: sh -c "python manage.py migrate && 
          python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}
      - KMA_API_KEY=${KMA_API_KEY}
      - TZ=Asia/Seoul
    depends_on:
      - db
      - elasticsearch
    networks:
      - my_network

  cron:
    image: alpine:latest
    volumes:
      - ./han_cycle:/app
      - ./crontab:/etc/crontabs/root  # crontab 파일을 컨테이너의 crontabs 디렉터리에 마운트
    entrypoint: ["/bin/sh", "-c", "crond -f"]  # crond를 포그라운드 모드로 실행
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
    networks:
      - my_network

  nginx:
    image: nginx:latest
    ports:
      - "443:443"
    volumes:
      - certs:/etc/letsencrypt
      - html:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt/live/hancycle.site:/etc/letsencrypt/live/hancycle.site
    depends_on:
      - app

  certbot:
    image: certbot/certbot
    volumes:
      - certs:/etc/letsencrypt
      - html:/var/www/html
    entrypoint: ["certbot"] # entrypoint 변경
    command: ["certonly", "--webroot", "-w", "/var/www/html", "--email", "yoonju977@gmail.com", "-d", "hancycle.site"] # 명령어 배열 형태로 변경

  db:
    image: postgres:15.7
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # 보안을 비활성화
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 2g
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - my_network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.1
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - my_network

volumes:
  postgres_data:
  es_data:
  certs:
  html:

networks:
  my_network:
    driver: bridge